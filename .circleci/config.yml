#version: 2.1
#
#orbs:
#  maven: circleci/maven@0.0.12
#
#workflows:
#  maven_test:
#    jobs:
#      - maven/test # checkout, build, test, and upload test results



# Java Maven CircleCI 2.0 configuration file
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11.0.3-jdk-stretch

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

#    environment:
#      # Customize the JVM maximum heap limit
#      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test

#version: 2.1 # use CircleCI 2.0
#jobs: # a collection of steps
#  build: # runs not using Workflows must have a `build` job as entry point
#
#    working_directory: ~/circleci-demo-java-spring # directory where steps will run
#
#    docker: # run the steps with Docker
#      - - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
#
#    steps: # a collection of executable commands
#
#      - checkout # check out source code to working directory
#
#      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
#          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
#          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
#
#      - run: mvn dependency:go-offline # gets the project dependencies
#
#      - save_cache: # saves the project dependencies
#          paths:
#            - ~/.m2
#          key: circleci-demo-java-spring-{{ checksum "pom.xml" }}
#
#      - run: mvn package # run the actual tests
#
#      - store_test_results: # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
#          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
#          path: target/surefire-reports
#
#      - store_artifacts: # store the uberjar as an artifact
#          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
#          path: target/demo-java-spring-0.0.1-SNAPSHOT.jar
#      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
#
# GRADLE
#version: 2 # use CircleCI 2.0
#jobs: # a collection of steps
#  build:
#    # Remove if parallelism is not desired
#    parallelism: 2
#    environment:
#      # Configure the JVM and Gradle to avoid OOM errors
#      _JAVA_OPTIONS: "-Xmx3g"
#      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
#    docker: # run the steps with Docker
#      - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
#      - image: circleci/postgres:12-alpine
#        environment:
#          POSTGRES_USER: postgres
#          POSTGRES_DB: circle_test
#    steps: # a collection of executable commands
#      - checkout # check out source code to working directory
#      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
#      - restore_cache:
#          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
#      - restore_cache:
#          key: v1-gradle-cache-{{ checksum "build.gradle" }}
#      - run:
#          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
#          # Use "./gradlew test" instead if tests are not run in parallel
#          command: |
#            cd src/test/java
#            # Get list of classnames of tests that should run on this node
#            CLASSNAMES=$(circleci tests glob "**/*.java" \
#              | cut -c 1- | sed 's@/@.@g' \
#              | sed 's/.\{5\}$//' \
#              | circleci tests split --split-by=timings --timings-type=classname)
#            cd ../../..
#            # Format the arguments to "./gradlew test"
#            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
#            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
#            ./gradlew test $GRADLE_ARGS
#      - save_cache:
#          paths:
#            - ~/.gradle/wrapper
#          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
#      - save_cache:
#          paths:
#            - ~/.gradle/caches
#          key: v1-gradle-cache-{{ checksum "build.gradle" }}
#      - store_test_results:
#          # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
#          path: build/test-results/test
#      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
#          path: build/test-results/test
#          when: always
#      - run:
#          name: Assemble JAR
#          command: |
#            # Skip this for other nodes
#            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
#              ./gradlew assemble
#            fi
#      # As the JAR was only assembled in the first build container, build/libs will be empty in all the other build containers.
#      - store_artifacts:
#          path: build/libs
#      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
#workflows:
#  version: 2
#  workflow:
#    jobs:
#      - build